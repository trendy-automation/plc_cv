#!groovy
// Run docker build
properties([disableConcurrentBuilds()])

pipeline {
    agent { 
        label 'jenkins_agent'
        }
    triggers { pollSCM('* * * * *') }
    options {
        skipDefaultCheckout(true)
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    
    environment {
        source_repo = 'https://github.com/trendy-automation/plc_cv.git'
        source_path = 'python'
        target_path = '/var/appdata'
    }
    
    stages {
        stage("clean workspace") {
            steps {
                echo " ============== clean workspace =================="
                cleanWs()
            }
        }
        stage("checkout") {
            steps {
                echo " ============== checkout =================="
                git url: source_repo
            }
        }
        stage ("stop opencv") {
            steps {
                //script {
                //    try {
                        echo " ============== stop opencv =================="
                        //sh '''#!/bin/bash
                        //chown jenkins /var/run/docker.sock
                        //curl -XPOST --unix-socket /var/run/docker.sock http://localhost/containers/opencv/stop
                        //'''
                        sh 'curl -XPOST --unix-socket /var/run/docker.sock http://localhost/containers/opencv/stop'
                //    } catch(error) {
                //        echo "First stop failed, let's retry"
                //        retry(1) {
                //            echo " ============== stop opencv =================="
                //            sh 'curl --connect-timeout 20 -XPOST --unix-socket /var/run/docker.sock http://localhost/containers/opencv/stop'
                //        }
                //    }
                //}
            }
        }
        stage ("clean & copy appdata") {
            steps {
                echo " ============== clean appdata =================="
                sh 'find $target_path/ -type f ! -name debug.log -and -type d ! -name __pycache__ -exec rm -R {} \\;'
                echo " ============== copy app =================="
                sh 'cp -ir $source_path $target_path'
            }
        }
        stage ("start opencv") {
            steps {
                //script {
                //    try {
                        echo " ============== start opencv =================="
                        sh 'curl -XPOST --unix-socket /var/run/docker.sock http://localhost/containers/opencv/start'
                //    } catch(error) {
                //        echo "First start failed, let's retry"
                //        retry(1) {
                //            echo " ============== start opencv =================="
                //            sh 'curl --connect-timeout 20 -XPOST --unix-socket /var/run/docker.sock http://localhost/containers/opencv/start'
                //        }
                //    }
                //}
            }
        }
    }
}
